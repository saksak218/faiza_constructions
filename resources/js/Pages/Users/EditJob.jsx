import React, { useState, useRef, useEffect } from 'react';
import { Head, useForm, router } from '@inertiajs/react';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import PrimaryButton from '@/Components/PrimaryButton';
import TextInput from '@/Components/TextInput';
import InputLabel from '@/Components/InputLabel';
import InputError from '@/Components/InputError';
import { toast, Toaster } from 'react-hot-toast';
import SignatureCanvas from 'react-signature-canvas';

// Dropdown Options
const propertyTypeOptions = ['House', 'Bungalow', 'Flat'];
const houseTypeOptions = ['Detached', 'Semi detached', 'Terraced', 'End of Terrace', 'Flat', 'Converted flats', 'Split level flats', 'Studio', 'Cottage', 'Bungalow'];
const bedroomsOptions = ['1bhk', '2bhk', '3bhk', '4bhk', '5bhk', '6bhk'];
const heatingSourceOptions = ['Gas boilers', 'Electric boilers', 'Storage heater', 'Electric panel heater', 'Heat pumps', 'Oil fired central heating', 'LPG', 'Biomass Boilers', 'Solar thermal', 'Central Heating'];

// Helper function to parse JSON data safely
const parseJsonData = (jsonString) => {
    try {
        const data = JSON.parse(jsonString);
        return Array.isArray(data) ? data : [];
    } catch (e) {
        if (Array.isArray(jsonString)) return jsonString;
        return [];
    }
};

// =================================================================================
// <<< ALL CHILD COMPONENTS (Full and Correct Code) >>>
// =================================================================================

const ConditionReportTab = ({ data, setData, errors, job }) => {
    const [activeConditionTab, setActiveConditionTab] = useState('external_elements');
    const handleElementChange = (listKey, index, field, value) => { const updatedElements = [...data[listKey]]; updatedElements[index][field] = value; setData(listKey, updatedElements); };
    const addElement = (listKey) => { setData(listKey, [...data[listKey], { title: '', description: '' }]); };
    const removeElement = (listKey, index) => { setData(listKey, data[listKey].filter((_, i) => i !== index)); };
    const NestedTabButton = ({ active, onClick, children }) => ( <button type="button" onClick={onClick} className={`px-4 py-2 text-sm font-medium rounded-md ${ active ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300' }`} > {children} </button> );
    const ElementRow = ({ element, index, onUpdate, onRemove }) => ( <div className="flex items-start space-x-2 mb-2 p-2 border rounded-md bg-gray-50"> <div className="flex-grow"> <TextInput placeholder="Element Title" value={element.title} onChange={(e) => onUpdate(index, 'title', e.target.value)} className="w-full mb-1" /> <textarea placeholder="Element Description" value={element.description} onChange={(e) => onUpdate(index, 'description', e.target.value)} className="w-full text-sm border-gray-300 rounded-md shadow-sm" rows="2" /> </div> <button type="button" onClick={() => onRemove(index)} className="text-red-500 hover:text-red-700 font-semibold mt-2 p-2" > Remove </button> </div> );
    const ImageGallery = ({ title, existingImageUrls, formKey }) => ( <div className="mt-6 p-4 border rounded-md bg-white"> <h4 className="text-md font-semibold mb-4">{title}</h4> <div> <InputLabel htmlFor={formKey} value={`Upload New Images`} /> <input id={formKey} type="file" multiple onChange={e => setData(formKey, e.target.files)} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100" /> <InputError message={errors[formKey]} className="mt-2" /> </div> {existingImageUrls && existingImageUrls.length > 0 && ( <div className="mt-4"> <h5 className="text-sm font-semibold mb-2">Uploaded Images:</h5> <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4"> {existingImageUrls.map((url, index) => ( <img key={index} src={url} alt={`image ${index + 1}`} className="w-full h-24 object-cover rounded-md border" /> ))} </div> </div> )} <div className="mt-4"> <PrimaryButton type="button">Download Selected Images</PrimaryButton> </div> </div> );
    return ( <div> <div className="mb-6 flex flex-wrap gap-2 border-b pb-4"> <NestedTabButton active={activeConditionTab === 'external_elements'} onClick={() => setActiveConditionTab('external_elements')}>External Elements</NestedTabButton> <NestedTabButton active={activeConditionTab === 'internal_elements'} onClick={() => setActiveConditionTab('internal_elements')}>Internal Elements</NestedTabButton> <NestedTabButton active={activeConditionTab === 'occupy_survey'} onClick={() => setActiveConditionTab('occupy_survey')}>Occupy Survey</NestedTabButton> <NestedTabButton active={activeConditionTab === 'general_details'} onClick={() => setActiveConditionTab('general_details')}>General Details</NestedTabButton> <NestedTabButton active={activeConditionTab === 'signy'} onClick={() => setActiveConditionTab('signy')}>Signy</NestedTabButton> <NestedTabButton active={activeConditionTab === 'add_new_element'} onClick={() => setActiveConditionTab('add_new_element')}>Add New Element</NestedTabButton> </div> <div className={activeConditionTab === 'external_elements' ? 'block' : 'hidden'}> <div className="flex justify-between items-center mb-4"> <h3 className="text-lg font-bold">External Elements List</h3> <button type="button" onClick={() => addElement('external_elements_list')} className="text-sm bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600">Add New Element</button> </div> {data.external_elements_list.map((el, index) => ( <ElementRow key={index} element={el} index={index} onUpdate={(idx, field, val) => handleElementChange('external_elements_list', idx, field, val)} onRemove={() => removeElement('external_elements_list', index)} /> ))} <ImageGallery title="External Elements Image Gallery" existingImageUrls={parseJsonData(job.external_elements_images)} formKey="external_elements_images" /> </div> <div className={activeConditionTab === 'internal_elements' ? 'block' : 'hidden'}> <div className="flex justify-between items-center mb-4"> <h3 className="text-lg font-bold">Internal Elements List</h3> <button type="button" onClick={() => addElement('internal_elements_list')} className="text-sm bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600">Add New Element</button> </div> {data.internal_elements_list.map((el, index) => ( <ElementRow key={index} element={el} index={index} onUpdate={(idx, field, val) => handleElementChange('internal_elements_list', idx, field, val)} onRemove={() => removeElement('internal_elements_list', index)} /> ))} <ImageGallery title="Internal Elements Image Gallery" existingImageUrls={parseJsonData(job.internal_elements_images)} formKey="internal_elements_images" /> </div> <div className={activeConditionTab === 'add_new_element' ? 'block' : 'hidden'}> <div className="flex justify-between items-center mb-4"> <h3 className="text-lg font-bold">Other Elements List</h3> <button type="button" onClick={() => addElement('other_elements_list')} className="text-sm bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600">Add New Element</button> </div> {data.other_elements_list.map((el, index) => ( <ElementRow key={index} element={el} index={index} onUpdate={(idx, field, val) => handleElementChange('other_elements_list', idx, field, val)} onRemove={() => removeElement('other_elements_list', index)} /> ))} </div> <div className={activeConditionTab === 'occupy_survey' ? 'block' : 'hidden'}> <InputLabel htmlFor="occupy_survey" value="Occupy Survey Description" className="font-bold text-lg" /> <textarea id="occupy_survey" value={data.occupy_survey} onChange={e => setData('occupy_survey', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm" rows="6"></textarea> <InputError message={errors.occupy_survey} className="mt-2" /> </div> <div className={activeConditionTab === 'general_details' ? 'block' : 'hidden'}> <InputLabel htmlFor="general_details" value="General Details" className="font-bold text-lg" /> <textarea id="general_details" value={data.general_details} onChange={e => setData('general_details', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm" rows="6"></textarea> <InputError message={errors.general_details} className="mt-2" /> </div> <div className={activeConditionTab === 'signy' ? 'block' : 'hidden'}> <InputLabel htmlFor="signy" value="Signy" className="font-bold text-lg"/> <textarea id="signy" value={data.signy} onChange={e => setData('signy', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm" rows="6"></textarea> <InputError message={errors.signy} className="mt-2" /> </div> </div> );
};

const ComplaintsTabContent = ({ job, installationSupervisors, measureInstallers }) => {
    const { data, setData, post, processing, errors, reset } = useForm({ subject: '', message: '', status: 'Pending', assigned_to: '', resolved_by: '', visit_date: '', close_date: '', department: '', measure_name: '', priority: 'Medium', images: null, });
    const submitComplaint = (e) => { e.preventDefault(); post(route('complaints.store', job.id), { forceFormData: true, onSuccess: () => { toast.success('Complaint added successfully!'); reset(); router.reload({ only: ['job'] }); }, onError: () => { toast.error('Please check the form for errors.'); } }); };
    const departmentOptions = ['Leadgen', 'Survey', 'Installer', 'NICEIS'];
    const priorityOptions = ['Low', 'Medium', 'High'];
    const statusOptions = ['Pending', 'Completed'];
    return ( <div> <form onSubmit={submitComplaint} className="mb-12 p-4 border-2 border-dashed rounded-md"> <h3 className="text-xl font-bold mb-6">Add New Complaint</h3> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> <div className="col-span-1 md:col-span-2 lg:col-span-3"> <InputLabel htmlFor="subject" value="Subject" /> <TextInput id="subject" value={data.subject} onChange={e => setData('subject', e.target.value)} className="w-full mt-1" /> <InputError message={errors.subject} className="mt-2" /> </div> <div className="col-span-1 md:col-span-2 lg:col-span-3"> <InputLabel htmlFor="message" value="Message" /> <textarea id="message" value={data.message} onChange={e => setData('message', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm" rows="4"></textarea> <InputError message={errors.message} className="mt-2" /> </div> <div> <InputLabel htmlFor="status" value="Complaint Status" /> <select id="status" value={data.status} onChange={e => setData('status', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"> {statusOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)} </select> <InputError message={errors.status} className="mt-2" /> </div> <div> <InputLabel htmlFor="assigned_to" value="Assigned To (Supervisor)" /> <select id="assigned_to" value={data.assigned_to} onChange={e => setData('assigned_to', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"> <option value="">Select Supervisor</option> {installationSupervisors.map(item => <option key={item.id} value={item.name}>{item.name}</option>)} </select> <InputError message={errors.assigned_to} className="mt-2" /> </div> <div> <InputLabel htmlFor="resolved_by" value="Resolved By (Installer)" /> <select id="resolved_by" value={data.resolved_by} onChange={e => setData('resolved_by', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"> <option value="">Select Installer</option> {measureInstallers.map(item => <option key={item.id} value={item.name}>{item.name}</option>)} </select> <InputError message={errors.resolved_by} className="mt-2" /> </div> <div> <InputLabel htmlFor="visit_date" value="Visit Date" /> <TextInput type="date" id="visit_date" value={data.visit_date} onChange={e => setData('visit_date', e.target.value)} className="w-full mt-1" /> <InputError message={errors.visit_date} className="mt-2" /> </div> <div> <InputLabel htmlFor="close_date" value="Close Date" /> <TextInput type="date" id="close_date" value={data.close_date} onChange={e => setData('close_date', e.target.value)} className="w-full mt-1" /> <InputError message={errors.close_date} className="mt-2" /> </div> <div> <InputLabel htmlFor="department" value="Department" /> <select id="department" value={data.department} onChange={e => setData('department', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"> <option value="">Select Department</option> {departmentOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)} </select> <InputError message={errors.department} className="mt-2" /> </div> <div> <InputLabel htmlFor="measure_name" value="Measure Name" /> <select id="measure_name" value={data.measure_name} onChange={e => setData('measure_name', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"> <option value="">Select Measure</option> {job.measures_details.map(measure => <option key={measure.id} value={measure.name}>{measure.name}</option>)} </select> <InputError message={errors.measure_name} className="mt-2" /> </div> <div> <InputLabel htmlFor="priority" value="Priority" /> <select id="priority" value={data.priority} onChange={e => setData('priority', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"> {priorityOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)} </select> <InputError message={errors.priority} className="mt-2" /> </div> <div className="col-span-1 md:col-span-2 lg:col-span-3"> <InputLabel htmlFor="images" value="Complaint Images/Documents" /> <input id="images" type="file" multiple onChange={e => setData('images', e.target.files)} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/> <InputError message={errors.images} className="mt-2" /> </div> </div> <div className="flex items-center justify-end mt-6"> <PrimaryButton disabled={processing}>{processing ? 'Submitting...' : 'Add Complaint'}</PrimaryButton> </div> </form> <div> <h3 className="text-xl font-bold mb-4">Complaint History</h3> {job.complaints && job.complaints.length > 0 ? ( <div className="space-y-4"> {job.complaints.map(complaint => ( <div key={complaint.id} className="p-4 border rounded-md bg-gray-50"> <div className="flex justify-between items-start"> <h4 className="font-bold">{complaint.subject}</h4> <span className={`px-2 py-1 text-xs font-semibold rounded-full ${complaint.status === 'Completed' ? 'bg-green-200 text-green-800' : 'bg-yellow-200 text-yellow-800'}`}>{complaint.status}</span> </div> <p className="text-sm text-gray-600 mt-2">{complaint.message}</p> <div className="text-xs text-gray-500 mt-4 grid grid-cols-2 md:grid-cols-4 gap-2"> <span><strong>Priority:</strong> {complaint.priority}</span> <span><strong>Department:</strong> {complaint.department}</span> <span><strong>Assigned To:</strong> {complaint.assigned_to}</span> <span><strong>Resolved By:</strong> {complaint.resolved_by}</span> <span><strong>Visit Date:</strong> {complaint.visit_date}</span> <span><strong>Close Date:</strong> {complaint.close_date}</span> </div> {complaint.images && complaint.images.length > 0 && ( <div className="mt-4"> <h5 className="font-semibold text-sm mb-2">Attached Files:</h5> <div className="flex flex-wrap gap-2"> {complaint.images.map((file, index) => ( <a key={index} href={file.path} target="_blank" rel="noopener noreferrer" className="text-sm text-blue-600 hover:underline bg-blue-50 p-2 rounded-md"> {file.name} </a> ))} </div> </div> )} </div> ))} </div> ) : ( <p>No complaints have been filed for this job yet.</p> )} </div> </div> );
};

const DocumentUploadSection = ({ title, existingDocs, form, formKey, errors }) => {
    const existingFiles = Array.isArray(existingDocs) ? existingDocs : [];
    return ( <div className="mb-8 p-4 border rounded-md bg-gray-50"> <h3 className="text-lg font-bold mb-4">{title}</h3> <div> <InputLabel htmlFor={formKey} value={`Upload New ${title}`} /> <input id={formKey} type="file" multiple onChange={e => form.setData(formKey, e.target.files)} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100" /> <InputError message={errors[formKey]} className="mt-2" /> </div> {existingFiles.length > 0 ? ( <div className="mt-6"> <h4 className="font-semibold text-sm mb-2">Uploaded Documents:</h4> <ul className="list-disc pl-5 space-y-2"> {existingFiles.map((file, index) => ( <li key={index} className="text-sm"> <a href={file.path} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline"> {file.name || `Document ${index + 1}`} </a> </li> ))} </ul> </div> ) : ( <p className="mt-4 text-sm text-gray-500">No documents uploaded yet for this section.</p> )} </div> );
};

const SignatureField = ({ label, signatureData, onSave }) => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const sigPadRef = useRef(null);
    const openModal = () => setIsModalOpen(true);
    const closeModal = () => setIsModalOpen(false);
    const clearSignature = () => sigPadRef.current.clear();
    const handleSave = () => { if (sigPadRef.current.isEmpty()) { onSave(null); } else { onSave(sigPadRef.current.toDataURL('image/png')); } closeModal(); };
    const placeholder = 'https://placehold.co/200x100/e2e8f0/e2e8f0?text=No+Signature';
    return ( <div className="mb-6 p-4 border rounded-md bg-gray-50"> <h4 className="font-bold mb-2">{label}</h4> <img src={signatureData || placeholder} alt={`${label} preview`} width="200" height="100" className="border bg-white rounded-md" /> <button type="button" onClick={openModal} className="mt-2 text-sm bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600"> Add / Edit </button> {isModalOpen && ( <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0, 0, 0, 0.7)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1050 }}> <div style={{ background: 'white', padding: '20px', borderRadius: '8px', maxWidth: '420px', width: '100%' }}> <h5 className="font-bold mb-4">{label}</h5> <div className="border border-dashed border-gray-400"> <SignatureCanvas ref={sigPadRef} penColor='black' canvasProps={{ width: 400, height: 200, className: 'sigCanvas' }} /> </div> <div className="mt-4 flex justify-center space-x-4"> <button onClick={handleSave} className="bg-green-500 text-white px-4 py-2 rounded-md">Save</button> <button onClick={clearSignature} className="bg-yellow-500 text-white px-4 py-2 rounded-md">Clear</button> <button onClick={closeModal} className="bg-gray-500 text-white px-4 py-2 rounded-md">Cancel</button> </div> </div> </div> )} </div> );
};

const SignaturesTabContent = ({ job }) => {
    const [signatures, setSignatures] = useState({ installer_signature: job.installer_signature || null, surveyor_signature: job.surveyor_signature || null, surveyor_signature_2: job.surveyor_signature_2 || null, electrical_installer_signature: job.electrical_installer_signature || null, coordinator_signature: job.coordinator_signature || null, additional_signatures: parseJsonData(job.additional_signatures), });
    const [processing, setProcessing] = useState(false);
    const handleSignatureChange = (type, data) => { setSignatures(prev => ({ ...prev, [type]: data })); };
    const handleAdditionalSignatureChange = (index, data) => { const newSigs = [...signatures.additional_signatures]; newSigs[index].data = data; setSignatures(prev => ({ ...prev, additional_signatures: newSigs })); };
    const addAdditionalSignature = () => { const title = prompt("Please enter a title for the new signature:"); if (title && title.trim() !== '') { const newSigs = [...signatures.additional_signatures, { title: title, data: null }]; setSignatures(prev => ({ ...prev, additional_signatures: newSigs })); } };
    const removeAdditionalSignature = (index) => { if (confirm('Are you sure you want to remove this signature?')) { const newSigs = signatures.additional_signatures.filter((_, i) => i !== index); setSignatures(prev => ({ ...prev, additional_signatures: newSigs })); } };
    const saveAllSignatures = () => { setProcessing(true); router.put(route('jobs.signatures.update', { job: job.id }), signatures, { preserveState: true, preserveScroll: true, onSuccess: () => toast.success('All signatures saved successfully!'), onError: (errors) => { console.error(errors); toast.error('Failed to save signatures.'); }, onFinish: () => setProcessing(false), }); };
    return ( <div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> <SignatureField label="Installer Signature" signatureData={signatures.installer_signature} onSave={(data) => handleSignatureChange('installer_signature', data)} /> <SignatureField label="Surveyor Signature 1" signatureData={signatures.surveyor_signature} onSave={(data) => handleSignatureChange('surveyor_signature', data)} /> <SignatureField label="Surveyor Signature 2" signatureData={signatures.surveyor_signature_2} onSave={(data) => handleSignatureChange('surveyor_signature_2', data)} /> <SignatureField label="Electrical Installer Signature" signatureData={signatures.electrical_installer_signature} onSave={(data) => handleSignatureChange('electrical_installer_signature', data)} /> <SignatureField label="Coordinator Signature" signatureData={signatures.coordinator_signature} onSave={(data) => handleSignatureChange('coordinator_signature', data)} /> </div> <hr className="my-8" /> <div> <div className="flex justify-between items-center mb-4"> <h3 className="text-lg font-bold">Additional Signatures</h3> <button onClick={addAdditionalSignature} className="bg-indigo-500 text-white px-4 py-2 rounded-md text-sm">Add New Signature</button> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {signatures.additional_signatures.map((sig, index) => ( <div key={index} className="relative"> <SignatureField label={sig.title} signatureData={sig.data} onSave={(data) => handleAdditionalSignatureChange(index, data)} /> <button onClick={() => removeAdditionalSignature(index)} className="absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold">X</button> </div> ))} </div> </div> <div className="flex items-center justify-end mt-8"> <PrimaryButton onClick={saveAllSignatures} disabled={processing}> {processing ? 'Saving...' : 'Save All Signature Changes'} </PrimaryButton> </div> </div> );
};

const SignaturePad = ({ title, signatureData, onSignatureChange }) => {
    const canvasRef = useRef(null);
    const fileInputRef = useRef(null);
    const isDrawingRef = useRef(false);
    useEffect(() => { const canvas = canvasRef.current; if (canvas) { const ctx = canvas.getContext('2d'); ctx.clearRect(0, 0, canvas.width, canvas.height); if (signatureData) { const image = new Image(); image.src = signatureData; image.onload = () => ctx.drawImage(image, 0, 0, canvas.width, canvas.height); } } }, [signatureData]);
    const getCoords = (e) => { const canvas = canvasRef.current; const rect = canvas.getBoundingClientRect(); const scaleX = canvas.width / rect.width; const scaleY = canvas.height / rect.height; const clientX = e.clientX || (e.touches && e.touches[0].clientX); const clientY = e.clientY || (e.touches && e.touches[0].clientY); return { x: (clientX - rect.left) * scaleX, y: (clientY - rect.top) * scaleY }; };
    const startDrawing = (e) => { e.preventDefault(); isDrawingRef.current = true; const coords = getCoords(e); const ctx = canvasRef.current.getContext('2d'); ctx.beginPath(); ctx.moveTo(coords.x, coords.y); };
    const stopDrawing = (e) => { e.preventDefault(); if (isDrawingRef.current) { isDrawingRef.current = false; const canvas = canvasRef.current; if (canvas) onSignatureChange(canvas.toDataURL('image/png')); } };
    const draw = (e) => { e.preventDefault(); if (!isDrawingRef.current) return; const coords = getCoords(e); const ctx = canvasRef.current.getContext('2d'); ctx.lineTo(coords.x, coords.y); ctx.stroke(); };
    const clearCanvas = () => { const canvas = canvasRef.current; const ctx = canvas.getContext('2d'); ctx.clearRect(0, 0, canvas.width, canvas.height); onSignatureChange(null); };
    const handleImageUpload = (e) => { const file = e.target.files[0]; if (file) { const reader = new FileReader(); reader.onloadend = () => { onSignatureChange(reader.result); }; reader.readAsDataURL(file); } };
    return ( <div className="mb-6 p-4 border rounded-md"> <h4 className="font-bold mb-2">{title}</h4> <canvas ref={canvasRef} width="400" height="150" className="border bg-gray-50 rounded-md touch-none" onMouseDown={startDrawing} onMouseUp={stopDrawing} onMouseLeave={stopDrawing} onMouseMove={draw} onTouchStart={startDrawing} onTouchEnd={stopDrawing} onTouchMove={draw} /> <div className="mt-2 flex items-center space-x-4"> <button type="button" onClick={clearCanvas} className="text-sm text-red-600">Clear</button> <button type="button" onClick={() => fileInputRef.current.click()} className="text-sm text-blue-600">Upload Image</button> <input type="file" ref={fileInputRef} className="hidden" accept="image/png, image/jpeg" onChange={handleImageUpload} /> </div> </div> );
};

const TabButton = ({ active, onClick, children }) => ( <button type="button" onClick={onClick} className={`px-3 py-2 text-xs font-medium rounded-t-lg whitespace-nowrap ${ active ? 'bg-white border-b-0 border-gray-300 text-blue-600' : 'bg-gray-100 text-gray-500 hover:bg-gray-200' }`}>{children}</button> );
const MeasureRow = ({ measure, index, handleMeasureChange, installers }) => (
    <tr key={measure.id || index}>
        <td className="border px-4 py-2 align-top">{measure.name}</td>
        <td className="border px-4 py-2 align-top text-center">
            <input type="checkbox" checked={measure.is_active} onChange={(e) => handleMeasureChange(index, 'is_active', e.target.checked)} className="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500 mt-2" />
        </td>
        <td className="border px-4 py-2 align-top">
            <select value={measure.installer_name || ''} onChange={(e) => handleMeasureChange(index, 'installer_name', e.target.value)} className="w-full border-gray-300 rounded-md shadow-sm text-sm">
                <option value="">Select Installer</option>
                {installers.map(installer => (<option key={installer.id} value={installer.name}>{installer.name}</option>))}
            </select>
        </td>
        <td className="border px-4 py-2 align-top"><TextInput type="date" className="w-full text-sm" value={measure.pre_install_date || ''} onChange={(e) => handleMeasureChange(index, 'pre_install_date', e.target.value)} /></td>
        <td className="border px-4 py-2 align-top"><TextInput type="time" className="w-full text-sm" value={measure.pre_install_time || ''} onChange={(e) => handleMeasureChange(index, 'pre_install_time', e.target.value)} /></td>
        <td className="border px-4 py-2 align-top"><TextInput type="date" className="w-full text-sm" value={measure.post_install_date || ''} onChange={(e) => handleMeasureChange(index, 'post_install_date', e.target.value)} /></td>
        <td className="border px-4 py-2 align-top">
            <select value={measure.status || ''} onChange={(e) => handleMeasureChange(index, 'status', e.target.value)} className="w-full border-gray-300 rounded-md shadow-sm text-sm">
                <option value="">Select Status</option>
                {['Pending', 'Ready to Book', 'Booked', 'Completed', 'In Progress'].map(status => (<option key={status} value={status}>{status}</option>))}
            </select>
        </td>
        <td className="border px-4 py-2 align-top">
            <select value={measure.invoice_status || ''} onChange={(e) => handleMeasureChange(index, 'invoice_status', e.target.value)} className="w-full border-gray-300 rounded-md shadow-sm text-sm">
                <option value="">Select Status</option>
                {['In Progress', 'Completed'].map(status => (<option key={status} value={status}>{status}</option>))}
            </select>
        </td>
        <td className="border px-4 py-2 align-top">
            <textarea value={measure.notes || ''} onChange={(e) => handleMeasureChange(index, 'notes', e.target.value)} className="w-full border-gray-300 rounded-md shadow-sm text-sm" rows="2"></textarea>
        </td>
    </tr>
);
const ElementRow = ({ element, index, handleElementChange, removeElement }) => ( <div className="flex items-start space-x-2 mb-2 p-2 border rounded-md"> <div className="flex-grow"> <TextInput placeholder="Element Title" value={element.title} onChange={(e) => handleElementChange(index, 'title', e.target.value)} className="w-full mb-1" /> <textarea placeholder="Element Description" value={element.description} onChange={(e) => handleElementChange(index, 'description', e.target.value)} className="w-full text-sm border-gray-300 rounded-md shadow-sm" rows="2" /> </div> <button type="button" onClick={() => removeElement(index)} className="text-red-500 mt-2">Remove</button> </div> );
const ImageGalleryTab = ({ title, existingImageUrls, form, formKey, errors }) => ( <div className="p-4 border rounded-md space-y-4"> <h3 className="text-lg font-bold">{title}</h3> <div> <InputLabel htmlFor={formKey} value={`Upload New ${title}`} /> <input id={formKey} type="file" multiple onChange={e => form.setData(formKey, e.target.files)} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100" /> <InputError message={errors[formKey]} className="mt-2" /> </div> {existingImageUrls.length > 0 ? ( <div> <h4 className="font-semibold text-sm mb-2">Existing Images:</h4> <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"> {existingImageUrls.map((url, index) => ( <img key={index} src={url} alt={`${title} image ${index + 1}`} className="w-full h-24 object-cover rounded-md border" /> ))} </div> </div> ) : ( <p className="text-sm text-gray-500">No images uploaded yet for this section.</p> )} <PrimaryButton type="button" className="w-full text-center">Download Selected Images</PrimaryButton> </div> );

// =================================================================================
// <<< MAIN EDIT JOB COMPONENT (Final and Corrected) >>>
// =================================================================================
export default function EditJob({ auth, job, users, leadGenerators, surveyors, installationSupervisors, measureInstallers }) {
    const [activeTab, setActiveTab] = useState('edit');

    const { data, setData, post, processing, errors } = useForm({
        _method: 'patch',
        house_no: job.house_no || '', street_name: job.street_name || '', city: job.city || '', county: job.county || '', post_code: job.post_code || '', lead_generator: job.lead_generator || '', surveyor: job.surveyor || '', survey_date: job.survey_date || '', survey_time: job.survey_time || '', survey_status: job.survey_status || '', auditor: job.auditor || '', installation_supervisor: job.installation_supervisor || '', retrofit_coordinator: job.retrofit_coordinator || '', status_category: job.status_category || '', rejection_note: job.rejection_note || '', scheme_type: job.scheme_type || '', sub_scheme_type: job.sub_scheme_type || '', datamatch_status: job.datamatch_status || '', datamatch_status_date: job.datamatch_status_date ? new Date(job.datamatch_status_date).toISOString().slice(0, 16) : '', epr_floor_area_segment: job.epr_floor_area_segment || '', epr_pre_rating: job.epr_pre_rating || '', epr_post_rating: job.epr_post_rating || '', epr_cost_saving: job.epr_cost_saving || '', date_installed: job.date_installed || '', installation_status: job.installation_status || 'pending', installation_notes: job.installation_notes || '', measures_details: job.measures_details || [], customer_title: job.customer_title || '', customer_first_name: job.customer_first_name || '', customer_last_name: job.customer_last_name || '', customer_contact_method: job.customer_contact_method || '', customer_email: job.customer_email || '', customer_phone: job.customer_phone || '', signature_general: job.signature_general || null, signature_undertaking_overall: job.signature_undertaking_overall || null, property_type: job.property_type || '', house_type: job.house_type || '', bedrooms: job.bedrooms || '', main_heating_source: job.main_heating_source || '',
        external_elements_list: parseJsonData(job.external_elements_list) || [],
        internal_elements_list: parseJsonData(job.internal_elements_list) || [],
        other_elements_list: parseJsonData(job.other_elements_list) || [],
        occupy_survey: job.occupy_survey || '', 
        general_details: job.general_details || '', 
        signy: job.signy || '',
        external_elements_images: null,
        internal_elements_images: null,
        mid_elements: job.mid_elements || [], mid_elements_images: null, post_elements: job.post_elements || [], post_elements_images: null, supervisor_audit_images: null, inspector_images: null, auditor_images: null, property_proof_docs: null, erp_docs: null, extra_docs: null,
    });
    
    const handleMeasureChange = (index, field, value) => { const updatedMeasures = [...data.measures_details]; updatedMeasures[index][field] = value; setData('measures_details', updatedMeasures); };
    const handleMidElementChange = (index, field, value) => { const updatedElements = [...data.mid_elements]; updatedElements[index][field] = value; setData('mid_elements', updatedElements); };
    const addMidElement = () => { setData('mid_elements', [...data.mid_elements, { title: '', description: '' }]); };
    const removeMidElement = (index) => { setData('mid_elements', data.mid_elements.filter((_, i) => i !== index)); };
    const handlePostElementChange = (index, field, value) => { const updatedElements = [...data.post_elements]; updatedElements[index][field] = value; setData('post_elements', updatedElements); };
    const addPostElement = () => { setData('post_elements', [...data.post_elements, { title: '', description: '' }]); };
    const removePostElement = (index) => { setData('post_elements', data.post_elements.filter((_, i) => i !== index)); };

    const submit = (e) => {
        e.preventDefault();
        const routeName = auth.user.role.id === 1 ? 'admin.jobs.update' : 'jobs.update.post';
        post(route(routeName, job.id), {
            forceFormData: true,
            onSuccess: () => toast.success('Job updated successfully!'),
            onError: (e) => { console.error(e); toast.error('Failed to update job. Please check the form.'); },
        });
    };

    const midJobImageUrls = parseJsonData(job.mid_elements_images);
    const postElementsImageUrls = parseJsonData(job.post_elements_images);
    const supervisorAuditImageUrls = parseJsonData(job.supervisor_audit_images);
    const inspectorImageUrls = parseJsonData(job.inspector_images);
    const auditorImageUrls = parseJsonData(job.auditor_images);
    
    return (
        <AuthenticatedLayout user={auth.user} header={<h2 className="font-semibold text-xl text-gray-800 leading-tight">Edit Job - {job.address}</h2>}>
            <Head title="Edit Job" />
            <Toaster position="top-center" />
            <div className="py-12">
                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div className="mb-4 border-b border-gray-200">
                        <nav className="-mb-px flex flex-wrap overflow-x-auto" aria-label="Tabs">
                            <TabButton active={activeTab === 'edit'} onClick={() => setActiveTab('edit')}>Edit</TabButton>
                            <TabButton active={activeTab === 'customer_info'} onClick={() => setActiveTab('customer_info')}>Customer Info</TabButton>
                            <TabButton active={activeTab === 'property_info'} onClick={() => setActiveTab('property_info')}>Property Info</TabButton>
                            <TabButton active={activeTab === 'condition_report'} onClick={() => setActiveTab('condition_report')}>Condition Report</TabButton>
                            <TabButton active={activeTab === 'mid_elements'} onClick={() => setActiveTab('mid_elements')}>Mid Elements</TabButton>
                            <TabButton active={activeTab === 'post_elements'} onClick={() => setActiveTab('post_elements')}>Post Elements</TabButton>
                            <TabButton active={activeTab === 'supervisor_audit'} onClick={() => setActiveTab('supervisor_audit')}>Supervisor Audit Images</TabButton>
                            <TabButton active={activeTab === 'inspector_images'} onClick={() => setActiveTab('inspector_images')}>Inspector Images</TabButton>
                            <TabButton active={activeTab === 'auditor_images'} onClick={() => setActiveTab('auditor_images')}>Auditor Images</TabButton>
                            <TabButton active={activeTab === 'signatures'} onClick={() => setActiveTab('signatures')}>Signatures</TabButton>
                            <TabButton active={activeTab === 'extra_docs'} onClick={() => setActiveTab('extra_docs')}>Extra Documents</TabButton>
                            <TabButton active={activeTab === 's_review'} onClick={() => setActiveTab('s_review')}>S. Review</TabButton>
                            <TabButton active={activeTab === 'submission'} onClick={() => setActiveTab('submission')}>Submission</TabButton>
                            <TabButton active={activeTab === 'forms_pdf'} onClick={() => setActiveTab('forms_pdf')}>Forms PDF</TabButton>
                            <TabButton active={activeTab === 'complaint'} onClick={() => setActiveTab('complaint')}>Complaint</TabButton>
                            <TabButton active={activeTab === 'job_notes'} onClick={() => setActiveTab('job_notes')}>Job Notes</TabButton>
                        </nav>
                    </div>

                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6 text-gray-900">
                            <div className={activeTab !== 'signatures' && activeTab !== 'complaint' ? 'block' : 'hidden'}>
                                <form onSubmit={submit}>
                                    <div className={activeTab === 'edit' ? 'block' : 'hidden'}>
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Address</h3><div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4"><div><InputLabel htmlFor="house_no" value="House No" /><TextInput id="house_no" value={data.house_no} onChange={e => setData('house_no', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="street_name" value="Street Name" /><TextInput id="street_name" value={data.street_name} onChange={e => setData('street_name', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="city" value="City/Town" /><TextInput id="city" value={data.city} onChange={e => setData('city', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="county" value="County Name" /><TextInput id="county" value={data.county} onChange={e => setData('county', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="post_code" value="Post Code" /><TextInput id="post_code" value={data.post_code} onChange={e => setData('post_code', e.target.value)} className="w-full mt-1" /></div></div></div>
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Job Workers</h3><div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4"><div><InputLabel htmlFor="lead_generator" value="Lead Generator" /><select id="lead_generator" value={data.lead_generator} onChange={e => setData('lead_generator', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select</option>{leadGenerators.map(item => <option key={item.id} value={item.name}>{item.name}</option>)}</select></div><div><InputLabel htmlFor="surveyor" value="Surveyor" /><select id="surveyor" value={data.surveyor} onChange={e => setData('surveyor', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select</option>{surveyors.map(item => <option key={item.id} value={item.name}>{item.name}</option>)}</select></div><div><InputLabel htmlFor="survey_date" value="Survey Date" /><TextInput type="date" id="survey_date" value={data.survey_date} onChange={e => setData('survey_date', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="survey_time" value="Survey Time" /><TextInput type="time" id="survey_time" value={data.survey_time} onChange={e => setData('survey_time', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="survey_status" value="Survey Status" /><TextInput id="survey_status" value={data.survey_status} onChange={e => setData('survey_status', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="auditor" value="Auditor" /><TextInput id="auditor" value={data.auditor} onChange={e => setData('auditor', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="installation_supervisor" value="Installation Supervisor" /><select id="installation_supervisor" value={data.installation_supervisor} onChange={e => setData('installation_supervisor', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select</option>{installationSupervisors.map(item => <option key={item.id} value={item.name}>{item.name}</option>)}</select></div><div><InputLabel htmlFor="retrofit_coordinator" value="Retrofit Coordinator" /><TextInput id="retrofit_coordinator" value={data.retrofit_coordinator} onChange={e => setData('retrofit_coordinator', e.target.value)} className="w-full mt-1" /></div></div></div>
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Status Category</h3><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"><div><InputLabel htmlFor="status_category" value="Status Category" /><TextInput id="status_category" value={data.status_category} onChange={e => setData('status_category', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="scheme_type" value="Scheme Type" /><TextInput id="scheme_type" value={data.scheme_type} onChange={e => setData('scheme_type', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="datamatch_status" value="DataMatch Status" /><TextInput id="datamatch_status" value={data.datamatch_status} onChange={e => setData('datamatch_status', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="datamatch_status_date" value="DataMatch Status Date" /><TextInput type="datetime-local" id="datamatch_status_date" value={data.datamatch_status_date} onChange={e => setData('datamatch_status_date', e.target.value)} className="w-full mt-1" /></div><div className="col-span-full"><InputLabel htmlFor="rejection_note" value="Rejection Note" /><textarea id="rejection_note" value={data.rejection_note} onChange={e => setData('rejection_note', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"></textarea></div></div></div>
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">EPC Rating From EPR</h3><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"><div><InputLabel htmlFor="epr_floor_area_segment" value="EPR Floor-Area Segment" /><TextInput id="epr_floor_area_segment" value={data.epr_floor_area_segment} onChange={e => setData('epr_floor_area_segment', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="epr_pre_rating" value="EPR Pre-Rating" /><TextInput type="number" step="0.01" id="epr_pre_rating" value={data.epr_pre_rating} onChange={e => setData('epr_pre_rating', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="epr_post_rating" value="EPR Post-Rating" /><TextInput type="number" step="0.01" id="epr_post_rating" value={data.epr_post_rating} onChange={e => setData('epr_post_rating', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="epr_cost_saving" value="EPR Cost Saving" /><TextInput type="number" step="0.01" id="epr_cost_saving" value={data.epr_cost_saving} onChange={e => setData('epr_cost_saving', e.target.value)} className="w-full mt-1" /></div></div></div>
                                        {data.measures_details.length > 0 && (<div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Measures</h3><div className="overflow-x-auto"><table className="w-full table-auto"><thead><tr className="bg-gray-200"><th className="px-4 py-2 text-left">Measure Name</th><th className="px-4 py-2 text-left">Active</th><th className="px-4 py-2 text-left">Measure Installer</th><th className="px-4 py-2 text-left">Pre-Install Date</th><th className="px-4 py-2 text-left">Pre-Install Time</th><th className="px-4 py-2 text-left">Post-Install Date</th><th className="px-4 py-2 text-left">Measure Status</th><th className="px-4 py-2 text-left">Invoice Clearance</th><th className="px-4 py-2 text-left">Notes</th></tr></thead><tbody>{data.measures_details.map((measure, index) => (<MeasureRow key={index} measure={measure} index={index} handleMeasureChange={handleMeasureChange} installers={measureInstallers} />))}</tbody></table></div></div>)}
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Job Notes</h3><div><InputLabel htmlFor="installation_notes" value="Installation Notes" /><textarea id="installation_notes" value={data.installation_notes} onChange={(e) => setData('installation_notes', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm" rows="4"></textarea></div></div>
                                    </div>
                                    <div className={activeTab === 'customer_info' ? 'block' : 'hidden'}>
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Customer Details</h3><div className="grid grid-cols-1 md:grid-cols-3 gap-4"><div><InputLabel htmlFor="customer_title" value="Title" /><select id="customer_title" value={data.customer_title} onChange={e => setData('customer_title', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select Title</option><option value="Mr">Mr</option><option value="Miss">Miss</option><option value="Mrs">Mrs</option></select></div><div><InputLabel htmlFor="customer_first_name" value="First Name" /><TextInput id="customer_first_name" value={data.customer_first_name} onChange={e => setData('customer_first_name', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="customer_last_name" value="Last Name" /><TextInput id="customer_last_name" value={data.customer_last_name} onChange={e => setData('customer_last_name', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="customer_contact_method" value="Preferred Contact Method" /><TextInput id="customer_contact_method" value={data.customer_contact_method} onChange={e => setData('customer_contact_method', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="customer_email" value="Email" /><TextInput type="email" id="customer_email" value={data.customer_email} onChange={e => setData('customer_email', e.target.value)} className="w-full mt-1" /></div><div><InputLabel htmlFor="customer_phone" value="Phone" /><TextInput type="tel" id="customer_phone" value={data.customer_phone} onChange={e => setData('customer_phone', e.target.value)} className="w-full mt-1" /></div></div></div>
                                        <SignaturePad title="General Signature" signatureData={data.signature_general} onSignatureChange={sig => setData('signature_general', sig)} />
                                        <SignaturePad title="Overall Undertaking Signature" signatureData={data.signature_undertaking_overall} onSignatureChange={sig => setData('signature_undertaking_overall', sig)} />
                                        <h3 className="text-lg font-bold mt-8 mb-4">Measure Undertaking Signatures</h3>
                                        {data.measures_details.map((measure, index) => (<SignaturePad key={measure.id || index} title={`${measure.name} Undertaking Signature`} signatureData={measure.signature_undertaking} onSignatureChange={sig => handleMeasureChange(index, 'signature_undertaking', sig)} />))}
                                    </div>
                                    <div className={activeTab === 'property_info' ? 'block' : 'hidden'}>
                                        <div className="mb-8 p-4 border rounded-md"><h3 className="text-lg font-bold mb-4">Property Details</h3><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"><div><InputLabel htmlFor="property_type" value="Property Type" /><select id="property_type" value={data.property_type} onChange={e => setData('property_type', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select Type</option>{propertyTypeOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}</select></div><div><InputLabel htmlFor="house_type" value="House Type" /><select id="house_type" value={data.house_type} onChange={e => setData('house_type', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select Type</option>{houseTypeOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}</select></div><div><InputLabel htmlFor="bedrooms" value="Bedrooms" /><select id="bedrooms" value={data.bedrooms} onChange={e => setData('bedrooms', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select Bedrooms</option>{bedroomsOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}</select></div><div><InputLabel htmlFor="main_heating_source" value="Pre Main Heating Source" /><select id="main_heating_source" value={data.main_heating_source} onChange={e => setData('main_heating_source', e.target.value)} className="w-full mt-1 border-gray-300 rounded-md shadow-sm"><option value="">Select Source</option>{heatingSourceOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}</select></div></div></div>
                                    </div>
                                    <div className={activeTab === 'condition_report' ? 'block' : 'hidden'}>
                                        <ConditionReportTab data={data} setData={setData} errors={errors} job={job} />
                                    </div>
                                    <div className={activeTab === 'mid_elements' ? 'block' : 'hidden'}>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div className="p-4 border rounded-md space-y-4"><div className="flex justify-between items-center"><h3 className="text-lg font-bold">Mid-Job Elements</h3><button type="button" onClick={addMidElement} className="text-sm bg-blue-500 text-white px-3 py-1 rounded-md">Add New Element</button></div><div className="space-y-2">{data.mid_elements.map((el, index) => (<ElementRow key={index} element={el} index={index} handleElementChange={handleMidElementChange} removeElement={removeMidElement} />))}</div></div><div className="p-4 border rounded-md space-y-4"><h3 className="font-semibold mb-2">Image Gallery & Uploads</h3><div><InputLabel htmlFor="mid_elements_images" value="Upload New Mid-Job Images" /><input id="mid_elements_images" type="file" multiple onChange={e => setData('mid_elements_images', e.target.files)} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/><InputError message={errors.mid_elements_images} className="mt-2" /></div>{midJobImageUrls.length > 0 ? (<div><h4 className="font-semibold text-sm mb-2">Existing Images:</h4><div className="grid grid-cols-3 gap-4">{midJobImageUrls.map((url, index) => (<img key={index} src={url} alt={`Mid-job image ${index + 1}`} className="w-full h-24 object-cover rounded-md border" />))}</div></div>) : (<p className="text-sm text-gray-500">No mid-job images uploaded yet.</p>)}<PrimaryButton type="button" className="w-full text-center">Download Selected Images</PrimaryButton></div></div>
                                    </div>
                                    <div className={activeTab === 'post_elements' ? 'block' : 'hidden'}>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div className="p-4 border rounded-md space-y-4"><div className="flex justify-between items-center"><h3 className="text-lg font-bold">Post-Job Elements</h3><button type="button" onClick={addPostElement} className="text-sm bg-blue-500 text-white px-3 py-1 rounded-md">Add New Element</button></div><div className="space-y-2">{data.post_elements.map((el, index) => (<ElementRow key={index} element={el} index={index} handleElementChange={handlePostElementChange} removeElement={removePostElement} />))}</div></div><div className="p-4 border rounded-md space-y-4"><h3 className="font-semibold mb-2">Image Gallery & Uploads</h3><div><InputLabel htmlFor="post_elements_images" value="Upload New Post-Job Images" /><input id="post_elements_images" type="file" multiple onChange={e => setData('post_elements_images', e.target.files)} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/><InputError message={errors.post_elements_images} className="mt-2" /></div>{postElementsImageUrls.length > 0 ? (<div><h4 className="font-semibold text-sm mb-2">Existing Images:</h4><div className="grid grid-cols-3 gap-4">{postElementsImageUrls.map((url, index) => (<img key={index} src={url} alt={`Post-job image ${index + 1}`} className="w-full h-24 object-cover rounded-md border" />))}</div></div>) : (<p className="text-sm text-gray-500">No post-job images uploaded yet.</p>)}<PrimaryButton type="button" className="w-full text-center">Download Selected Images</PrimaryButton></div></div>
                                    </div>
                                    <div className={activeTab === 'supervisor_audit' ? 'block' : 'hidden'}><ImageGalleryTab title="Supervisor Audit Images" existingImageUrls={supervisorAuditImageUrls} form={{ data, setData }} formKey="supervisor_audit_images" errors={errors} /></div>
                                    <div className={activeTab === 'inspector_images' ? 'block' : 'hidden'}><ImageGalleryTab title="Inspector Images" existingImageUrls={inspectorImageUrls} form={{ data, setData }} formKey="inspector_images" errors={errors} /></div>
                                    <div className={activeTab === 'auditor_images' ? 'block' : 'hidden'}><ImageGalleryTab title="Auditor Images" existingImageUrls={auditorImageUrls} form={{ data, setData }} formKey="auditor_images" errors={errors} /></div>
                                    <div className={activeTab === 'extra_docs' ? 'block' : 'hidden'}>
                                        <DocumentUploadSection title="Property Proof Documents" existingDocs={parseJsonData(job.property_proof_docs)} form={{ data, setData }} formKey="property_proof_docs" errors={errors} />
                                        <DocumentUploadSection title="ERP Documents" existingDocs={parseJsonData(job.erp_docs)} form={{ data, setData }} formKey="erp_docs" errors={errors} />
                                        <DocumentUploadSection title="Extra Documents" existingDocs={parseJsonData(job.extra_docs)} form={{ data, setData }} formKey="extra_docs" errors={errors} />
                                    </div>

                                    <div className="flex items-center justify-end mt-4">
                                        <PrimaryButton disabled={processing}>Save Changes</PrimaryButton>
                                    </div>
                                </form>
                            </div>

                            <div className={activeTab === 'signatures' ? 'block' : 'hidden'}>
                                <SignaturesTabContent job={job} />
                            </div>
                            <div className={activeTab === 'complaint' ? 'block' : 'hidden'}>
                                <ComplaintsTabContent job={job} installationSupervisors={installationSupervisors} measureInstallers={measureInstallers} />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}